if __name__ == "main":
	exit()


from instructor import Instructor
from bd import DataBase
import telebot


class Msg_handler:
	def __init__(self, bot):
		self.bot = bot
		self.instructor = Instructor()
		self.ins_name = self.instructor.get_instruction_names()
		self.bd = DataBase()
		self.build_keyboard()
		self.contacts = self.get_contacts_in_file()

	def get_contacts_in_file(self):
		pathfile = "contact.txt"
		with open(pathfile, "r", encoding="utf-8") as contactsf:
			contacts = contactsf.read()
		return contacts

	def go_contact_it(self, message):
		msg_id = message.chat.id
		msg_question = message.text
		self.bd.addQuestion(msg_question, message.from_user.username)
		self.bot.send_message(msg_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç", reply_markup=self.mrkp_menu)
	
	def find_id_user(self, id_user):
		allUserInfo = self.bd.getAllUserInfo()
		for i in allUserInfo:
			if id_user == str(i[0]):
				return True
		return False

	def find_id_question(self, id_quest):
		allQuestions = self.bd.getQuestions()
		for i in allQuestions:
			if id_quest == str(i[0]):
				return True
		return False

	def get_users(self):
		users = self.bd.getWhiteList()
		users = list(map(lambda n: n[0], users))
		return users

	def add_user_step1(self, message):
		user_name = message.text
		users = self.get_users()
		if not user_name in users:
			self.add_user_info.append(message.text)
			add_user_first_name = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è",
													reply_markup=self.mrkp_admin)
			self.bot.register_next_step_handler(add_user_first_name, self.add_user_step2)
		else:
			add_user_first_name = self.bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω",
													reply_markup=self.mrkp_admin)

	def add_user_step2(self, message):
		self.add_user_info.append(message.text)
		add_user_last_name = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é",
												reply_markup=self.mrkp_admin)
		self.bot.register_next_step_handler(add_user_last_name, self.add_user_step3)

	def add_user_step3(self, message):
		self.add_user_info.append(message.text)
		add_user_phone_number = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ—Ñ–æ–Ω",
												reply_markup=self.mrkp_admin)
		self.bot.register_next_step_handler(add_user_phone_number, self.add_user_step4)

	def add_user_step4(self, message):
		self.add_user_info.append(message.text)
		self.bd.addUser(self.add_user_info[0], self.add_user_info[1],
						self.add_user_info[2], self.add_user_info[3])
		self.bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω",
								reply_markup=self.mrkp_admin)

	def delete_user(self, message):
		msg_id = message.chat.id
		if self.find_id_user(message.text):
			user_name = self.bd.getUserName(message.text)[0]
			self.bd.delQuestionsUser(user_name)
			self.bd.delUser(message.text)
			self.bot.send_message(msg_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω", reply_markup=self.mrkp_admin)
		else:
			self.bot.send_message(msg_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=self.mrkp_admin)
	def delete_question(self, message):
		msg_id = message.chat.id
		if self.find_id_question(message.text):
			self.bd.delQuestion(message.text)
			self.bot.send_message(msg_id, "–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω", reply_markup=self.mrkp_admin)
		else:
			self.bot.send_message(msg_id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=self.mrkp_admin)
	
	def build_keyboard(self):
		self.mrkp_menu = telebot.types.ReplyKeyboardMarkup(True)
		self.mrkp_menu.row("‚úâÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ IT –æ—Ç–¥–µ–ª", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
		self.mrkp_menu.row("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ô•Ô∏è –ü–æ–∂–µ–ª–∞–Ω–∏—è")

		self.mrkp_admin = telebot.types.ReplyKeyboardMarkup(True)
		self.mrkp_admin.row("ü§∑‚Äç‚ôÄÔ∏è –Æ–∑–µ—Ä—ã", "ü§∑‚Äç‚ôÄÔ∏è –î–æ–±–∞–≤–∏—Ç—å", "ü§∑‚Äç‚ôÄÔ∏è –£–¥–∞–ª–∏—Ç—å")
		self.mrkp_admin.row("‚ùì –í–æ–ø—Ä–æ—Å—ã", "‚ùì –£–¥–∞–ª–∏—Ç—å")
		self.mrkp_admin.row("üîî\n–†–∞—Å—Å—ã–ª–∫–∞", "üîï\n–û—Ç–∫–ª—é—á–∏—Ç—å")

		self.mrkp_ins = telebot.types.ReplyKeyboardMarkup()
		for i in self.ins_name:
			self.mrkp_ins.row(i)


	def go_message_block(self, message):
		msg_id = message.chat.id
		self.bot.send_message(msg_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."+
										" –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
						reply_markup=self.mrkp_menu)
	def go_message_admin(self, message):
		msg = message.text
		msg_id = message.chat.id
		if msg == "ü§∑‚Äç‚ôÄÔ∏è –Æ–∑–µ—Ä—ã":
			self.bot.send_message(msg_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
							reply_markup=self.mrkp_admin)
			for i in self.bd.getAllUserInfo():
				i = (i[0], "@" + i[1], i[2], i[3])
				i = map(str, i)
				i = " ".join(i)
				self.bot.send_message(msg_id, "".join(i), reply_markup=self.mrkp_admin)
		elif msg == "ü§∑‚Äç‚ôÄÔ∏è –£–¥–∞–ª–∏—Ç—å":
			delete_id_user = self.bot.send_message(msg_id, "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
							reply_markup=self.mrkp_admin)
			self.bot.register_next_step_handler(delete_id_user, self.delete_user)
		elif msg == "‚ùì –£–¥–∞–ª–∏—Ç—å":
			delete_id_question = self.bot.send_message(msg_id, "–í–≤–µ–¥–∏—Ç–µ id –≤–æ–ø—Ä–æ—Å–∞",
							reply_markup=self.mrkp_admin)
			self.bot.register_next_step_handler(delete_id_question, self.delete_question)
		elif msg == "üîî\n–†–∞—Å—Å—ã–ª–∫–∞":
			self.bd.updateAdminChatId(message.from_user.username, msg_id)
			self.bot.send_message(msg_id, "–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞", 
									reply_markup=self.mrkp_admin)
		elif msg == "üîï\n–û—Ç–∫–ª—é—á–∏—Ç—å":
			self.bd.updateAdminChatId(message.from_user.username, "")
			self.bot.send_message(msg_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞", 
									reply_markup=self.mrkp_admin)
		elif msg == "ü§∑‚Äç‚ôÄÔ∏è –î–æ–±–∞–≤–∏—Ç—å":
			add_user_name = self.bot.send_message(msg_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä - AlexanderKomyakov - –±–µ–∑ '@', –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: @AlexanderKomyakov",
							reply_markup=self.mrkp_admin)
			self.add_user_info = []
			#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
			#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –º–∞—Å—Å–∏–≤ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			#–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			self.bot.register_next_step_handler(add_user_name, self.add_user_step1)
		elif msg == "‚ùì –í–æ–ø—Ä–æ—Å—ã":
			for i in self.bd.getQuestions(): i = map(str, i); i = " ".join(i)
				self.bot.send_message(msg_id, "".join(i), reply_markup=self.mrkp_admin)
		else:
			self.bot.send_message(msg_id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", reply_markup=self.mrkp_admin)
	
	def go_message(self, message):
		msg = message.text
		msg_id = message.chat.id
		if msg == ("/start"):
			self.bot.send_message(msg_id, "–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
							reply_markup=self.mrkp_menu)

		elif msg == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
			self.bot.send_message(msg_id, "–î–µ—Ä–∂–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
							reply_markup=self.mrkp_ins)

		elif msg == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
			self.bot.send_message(msg_id, self.contacts,
							reply_markup=self.mrkp_menu)
		elif msg == "‚úâÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ IT –æ—Ç–¥–µ–ª":
			question = self.bot.send_message(msg_id,
							"–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å",
							reply_markup=self.mrkp_menu)
			self.bot.register_next_step_handler(question, self.go_contact_it)
		elif msg in self.ins_name:
			ins_text = self.instructor.get_instruction_text(msg)
			ins_photo = self.instructor.get_instruction_photo(msg)
			ins_doc = self.instructor.get_instruction_document(msg)
			for i in range(len(ins_text)):
				try:
					self.bot.send_document(msg_id, ins_doc[i],
									reply_markup=self.mrkp_menu)
				except:
					pass
				self.bot.send_message(msg_id, ins_text[i],
								reply_markup=self.mrkp_menu)
				try:
					self.bot.send_photo(msg_id, ins_photo[i],
									reply_markup=self.mrkp_menu)
				except:
					pass
			self.bot.send_message(msg_id, "–í –º–µ–Ω—é ->",
							reply_markup=self.mrkp_menu)
		else:
			self.bot.send_message(msg_id,
							"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...",
							reply_markup=self.mrkp_menu)
